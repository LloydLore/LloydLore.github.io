<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Byte of Cybersecurity</title><link>http://localhost:1313/</link><description>Recent content on A Byte of Cybersecurity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 07 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>Set Milestone In Taskjuggler Via Orgmode</title><link>http://localhost:1313/posts/set-milestone-in-taskjuggler-via-orgmode/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0800</pubDate><guid>http://localhost:1313/posts/set-milestone-in-taskjuggler-via-orgmode/</guid><description>A Byte of Cybersecurity http://localhost:1313/posts/set-milestone-in-taskjuggler-via-orgmode/ -&lt;h2 id="taskjuggler-是个好东西"&gt;Taskjuggler 是个好东西&lt;/h2&gt;
&lt;p&gt;我在工作中，经常会需要排布计划。我很不喜欢用 Excel, Microsoft Project 等这些工具
去做这件事情，一来我不喜欢那么将随意调整的能力给到可以访问计划的每一个人，二来这
些工具的可操作性实在太差了，一会儿用用鼠标，一会儿调一调格式，这都是很让我割裂的
工作方式。&lt;/p&gt;
&lt;p&gt;我很久以前试过用 PlantUML 做甘特图，问题在于 PlantUML 的一致性太差了，并且它也不
是个专门用于项目管理的工具。当然和 PlantUML 对标的 Mermaid 也不是我的理想型。但
直到某一天，我遇到了 Taskjuggler。我的问题终于得到了解决方案。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://taskjuggler.org/"&gt;Taskjuggler&lt;/a&gt; 诞生于 2001 年，是一款历时已久的项目管理工具。经过了这么些年对于项目
管理的摸爬滚打，我渐渐觉得软件工程在项目管理上，有时候需要借鉴的太多了。软件工程
固然有其复杂性，但这复杂性往往带来的是混沌，而非经典项目管理上的确定性。一个项目
追求的一个大目标，就是其确定性，若没有确定性，便没有计划。&lt;/p&gt;
&lt;p&gt;日益复杂的系统工程，带来了确定性的挑战。这也就需要系统的项目管理工具来辅助项目管
理人员来思考。我个人认为 Taskjuggler 最大的优势在于其高度的开放性，它开放了很多
的字段，这些字段可以照顾到我在一个项目上碰到的各种各样奇怪的问题。而其他的工具，
看似上手容易，实则限制了想象力。我很想在这个地方多说一些自己的感悟，可恨的地方在
于，我对 Taskjuggler 的体验还没有那样深刻。等之后有机会，我可以多写一些这部分的
对比介绍。&lt;/p&gt;
&lt;h2 id="taskjuggler-with-milestone"&gt;Taskjuggler with Milestone&lt;/h2&gt;
&lt;p&gt;当在进行高层次的项目计划时，我通常不会考虑细节的分解，对于某一个任务，我更喜欢使
用类似 &amp;ldquo;deadline(最终期限)&amp;rdquo; 或者 &amp;ldquo;delivery time(交付时间)&amp;rdquo; 的方式来开展组织计划。
相应地，在taskjuggler 中，我会用如下的范例来描述一个任务的交付时间：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-taskjuggler" data-lang="taskjuggler"&gt;task tara &amp;#34;TARA&amp;#34; {
milestone
end 2025-2-15
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由以上的范例可以发现，taskjuggler 使用的是一种不太常见的语言，说实话这有些增加了
学习成本。幸运的是 taskjuggler 可以使用 Orgmode 来转化。所以 &lt;a href="https://orgmode.org/worg/exporters/taskjuggler/ox-taskjuggler.html"&gt;Let&amp;rsquo;s Orgmode!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每一个确定性的目标都是要满足某一个 Milestone。taskjggler 里使用 🔶 来表示一个
Milestone 的完成。&lt;/p&gt;
&lt;h2 id="trial-and-error"&gt;Trial and Error&lt;/h2&gt;
&lt;p&gt;在使用 Orgmode 导出 Taskjuggler milestone 的时候，我遇到了一个问题，详细可以参考
&lt;a href="https://github.com/taskjuggler/TaskJuggler/issues/236"&gt;这里&lt;/a&gt;。这个 Issue 并没有给出最终的解决办法，经过我的试错，一个 walkaround 是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要在最后一个 task 里增加 end property!
不要在最后一个 task 里增加 end property!
不要在最后一个 task 里增加 end property!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;好了，happy hacking!&lt;/p&gt;
- http://localhost:1313/posts/set-milestone-in-taskjuggler-via-orgmode/ -</description></item><item><title>Welcome A Puppy</title><link>http://localhost:1313/posts/welcome-a-puppy/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0800</pubDate><guid>http://localhost:1313/posts/welcome-a-puppy/</guid><description>A Byte of Cybersecurity http://localhost:1313/posts/welcome-a-puppy/ -&lt;p&gt;我一直以来很喜欢🐕，并且我在十一二岁的时候，也养过一只小哈巴狗。我喜欢带着它上床
睡觉。但后来那只狗被送人了。我也就再也没有养过狗了。&lt;/p&gt;
&lt;p&gt;上周末带着老婆孩子逛商场，原本只是饭后散步式的逛街，也计划了逛街后，去打羽毛球。
等我们走到商场里的宠物店时，一只小柴犬吸引了我们的目光。后来才知道，其实它也不算
小，已经足足有五个月了。在那个瞬间我们一家三口集体脑子发热，没有做过多的犹豫就买
下了它。我付出了乐观代价，带回了一只有活力的小狗。&lt;/p&gt;
&lt;p&gt;几天以来，我有了种重新当爸爸的感觉，小狗怎么养，怎么教，我在此之前从没有做过什么
功课。我真的很喜欢它。欢迎这个家庭有了新成员！我们现在算是四口之家（👨‍👩‍👧‍🐶）了！&lt;/p&gt;
- http://localhost:1313/posts/welcome-a-puppy/ -</description></item><item><title>Golden Dict Talks to Anki</title><link>http://localhost:1313/posts/goldendict-talks-to-anki/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0800</pubDate><guid>http://localhost:1313/posts/goldendict-talks-to-anki/</guid><description>A Byte of Cybersecurity http://localhost:1313/posts/goldendict-talks-to-anki/ -&lt;p&gt;我习惯在电脑上使用离线词典，一来离线词典很快，二来在没有网络的时候，离线词典仍然
能给我一个比较好的结果。其实还有个可能是谬误的想法，我总觉得在线词典，更加吃电脑
的资源，而资源嘛，能省则省啦。&lt;/p&gt;
&lt;p&gt;使用过很多词典，对我来说，以及对我儿子来说，欧路词典能够解决大部分平常遇到的问题，
但我总觉在从词典生查的信息，到最终落到内化的知识，欧路词典对于我个人来说，是不太
够的。所以我开始打 &lt;code&gt;GoldenDict&lt;/code&gt; 的主意了。&lt;/p&gt;
&lt;p&gt;最早的 &lt;code&gt;GoldenDict&lt;/code&gt; 已经很长时间没有维护了，感谢开源作者们重新 fork 出了一个
&lt;a href="https://github.com/xiaoyifang/goldendict-ng"&gt;GoldenDict-ng&lt;/a&gt;，这个版本具有检索快，支持大词典，以及快速搜索等强大使用的功能，但
这次我要使用的是一个船新的功能 —— &lt;strong&gt;Anki Integration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;长久以来，我使用 Anki 的一个比较痛苦的方面就是做卡片。而 GoldenDict-ng 具备一键
制卡的功能，虽然初始的卡片没有那么好看，但也可以通过定制 Anki 卡片的 css 那些方
式来让卡片好看起来。整体来说，这是一个非常实用的功能了。&lt;/p&gt;
&lt;p&gt;具体的操作可以分为几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Anki Connector (这一步是必须的，无论是使用 Emacs, Chrome Extension 制卡，
这都需要安装)&lt;/li&gt;
&lt;li&gt;设置 GoldenDict-ng 选项&lt;/li&gt;
&lt;li&gt;点一下，生成卡片&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="设置-goldendict-ng-选项"&gt;设置 GoldenDict-ng 选项&lt;/h2&gt;
&lt;p&gt;在对 &lt;code&gt;GoldenDict-ng&lt;/code&gt; 做设置时，我们需要在 &lt;code&gt;Preferences-&amp;gt;Network-&amp;gt;Anki Connect&lt;/code&gt;
中设置一些参数，具体可以参考以下：&lt;/p&gt;
&lt;figure&gt;&lt;img src="http://localhost:1313/ox-hugo/2024-10-25_16-05-48_screenshot.png"&gt;
&lt;/figure&gt;
&lt;h2 id="点一下"&gt;点一下&lt;/h2&gt;
&lt;p&gt;设置好 Anki Connect 后，在词典的界面，会多出一个加号，如下图，状态栏会有提示：
&lt;code&gt;anki:post to anki success&lt;/code&gt;, 这样就可以去 Anki 中查看卡了。&lt;/p&gt;
&lt;figure&gt;&lt;img src="http://localhost:1313/ox-hugo/2024-10-25_16-08-48_screenshot.png"&gt;
&lt;/figure&gt;
&lt;h2 id="小结"&gt;小结&lt;/h2&gt;
&lt;p&gt;希望这条路打通之后，我能多记一些单词吧。Happy Hacking!&lt;/p&gt;
- http://localhost:1313/posts/goldendict-talks-to-anki/ -</description></item></channel></rss>